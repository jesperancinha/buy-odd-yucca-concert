x-kong-config: &kong-env
  KONG_DATABASE: ${KONG_DATABASE:-off}
  KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
  KONG_PG_HOST: ${POSTGRESQL_HOST:-yucca-db}
  KONG_PG_USER: ${KONG_PG_USER:-kong}
  KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password

volumes:
  kong_data_vol: { }
  kong_prefix_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  kong_tmp_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs

networks:
  yucca-net:

services:
  kong-migrations-up:
    container_name: kong-migrations
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations bootstrap && kong migrations up && kong migrations finish
    depends_on:
      yucca-db:
        condition: service_healthy
    environment:
      <<: *kong-env
    secrets:
      - kong_postgres_password
    networks:
      - yucca-net

  kong:
    hostname: kong
    container_name: kong
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    depends_on:
        yucca-db:
          condition: service_healthy
        buy-oyc-api:
          condition: service_healthy
        buy-oyc-ticket:
          condition: service_healthy
        buy-oyc-concert:
          condition: service_healthy
        buy-oyc-catering:
          condition: service_healthy
        buy-oyc-parking:
          condition: service_healthy
        kong-migrations-up:
          condition: service_completed_successfully
    user: "${KONG_USER:-kong}"
    environment:
      <<: *kong-env
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: "${KONG_PROXY_LISTEN:-0.0.0.0:8000}"
      KONG_ADMIN_LISTEN: "${KONG_ADMIN_LISTEN:-0.0.0.0:8001}"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PREFIX: ${KONG_PREFIX:-/var/run/kong}
      KONG_ADMIN_GUI_URL: "http://0.0.0.0:8002"
      KONG_PORTAL_GUI_HOST: "0.0.0.0:8003"
      KONG_PORTAL: "on"
      KONG_LUA_PACKAGE_PATH: "./?.lua;./?/init.lua;"
    restart: on-failure
    secrets:
      - kong_postgres_password
    ports:
      # The following two environment variables default to an insecure value (0.0.0.0)
      # according to the CIS Security test.
      - "8000:8000"
      - "${KONG_INBOUND_SSL_PROXY_LISTEN:-0.0.0.0}:8443:8443/tcp"
      # Making them mandatory but undefined, like so would be backwards-breaking:
      # - "${KONG_INBOUND_PROXY_LISTEN?Missing inbound proxy host}:8000:8000/tcp"
      # - "${KONG_INBOUND_SSL_PROXY_LISTEN?Missing inbound proxy ssl host}:8443:8443/tcp"
      # Alternative is deactivating check 5.13 in the security bench, if we consider Kong's own config to be enough security here

      - "127.0.0.1:8001:8001/tcp"
      - "127.0.0.1:8444:8444/tcp"
      - "8002:8002"
      - "8003:8003"
    healthcheck:
      test: [ "CMD", "kong", "health" ]
      interval: 10s
      timeout: 10s
      retries: 20
      start_period: 0s
    volumes:
      - ./kong_prefix_vol:${KONG_PREFIX:-/var/run/kong}
      - ./kong_tmp_vol:/tmp
      - ./kong:/opt/kong
      - ./kong/kong-migration.sh:/opt/kong/kong-migration.sh
    security_opt:
      - no-new-privileges
    networks:
      yucca-net:

  kong-deck:
    hostname: kong-deck
    container_name: kong-deck
    image: kong/deck:v1.16.1
    volumes:
      - ${PWD}/kong:/deck
    command: "--kong-addr http://kong:8001 -s /deck/kong.yaml sync"
    networks:
      yucca-net:
    depends_on:
      kong:
        condition: service_healthy
      yucca-db:
        condition: service_healthy
      buy-oyc-api:
        condition: service_healthy
      buy-oyc-ticket:
        condition: service_healthy
      buy-oyc-concert:
        condition: service_healthy
      buy-oyc-catering:
        condition: service_healthy
      buy-oyc-parking:
        condition: service_healthy
      kong-migrations-up:
        condition: service_completed_successfully

  yucca-db:
    hostname: yucca-db
    container_name: yucca-db
    image: postgres:14.2
#    user: ${YUCCA_USER_DB}
    command: postgres -c listen_addresses='*' -c 'max_connections=400' -c 'shared_buffers=100MB'
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
      POSTGRES_PASSWORD_FILE: /run/secrets/kong_postgres_password
      POSTGRES_MULTIPLE_DATABASES: yucca
    secrets:
      - kong_postgres_password
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${KONG_PG_USER:-kong}" ]
      interval: 30s
      timeout: 30s
      retries: 10
      start_period: 0s
    restart: on-failure
    stdin_open: true
    tty: true
    expose:
      - 5432
    volumes:
      - ./kong_data_vol:/var/lib/postgresql/data
      - ./docker-images/docker-psql:/docker-entrypoint-initdb.d
      - ./docker-images/docker-psql/multiple:/docker-entrypoint-initdb.d/multiple
    networks:
      yucca-net:

  buy-oyc-ticket:
    hostname: buy-oyc-ticket
    container_name: buy-oyc-ticket
    depends_on:
        yucca-db:
          condition: service_healthy
    build:
      context: buy-oyc-ticket-service/.
    environment:
      REDIS_HOST: redis
      POSTGRESQL_HOST: yucca-db
      KONG_SERVICE_IP: kong
    networks:
      yucca-net:
    healthcheck:
      test: ["CMD", "curl", "--silent", "http://127.0.0.1:8084/swagger/views/swagger-ui/index.html"]
      interval: 5s
      timeout: 240s
      retries: 60

  buy-oyc-concert:
    hostname: buy-oyc-concert
    container_name: buy-oyc-concert
    depends_on:
        yucca-db:
          condition: service_healthy
    build:
      context: buy-oyc-concert-service/.
    environment:
      REDIS_HOST: redis
      POSTGRESQL_HOST: yucca-db
    networks:
      yucca-net:
    healthcheck:
      test: ["CMD", "curl", "--silent", "http://127.0.0.1:8085/swagger/views/swagger-ui/index.html"]
      interval: 5s
      timeout: 240s
      retries: 60

  buy-oyc-parking:
    hostname: buy-oyc-parking
    container_name: buy-oyc-parking
    depends_on:
        yucca-db:
          condition: service_healthy
    build:
      context: buy-oyc-parking-service/.
    environment:
      REDIS_HOST: redis
      POSTGRESQL_HOST: yucca-db
    networks:
      yucca-net:
    healthcheck:
      test: ["CMD", "curl", "--silent", "http://127.0.0.1:8086/swagger/views/swagger-ui/index.html"]
      interval: 5s
      timeout: 240s
      retries: 60

  buy-oyc-catering:
    hostname: buy-oyc-catering
    container_name: buy-oyc-catering
    depends_on:
        yucca-db:
          condition: service_healthy
    build:
      context: buy-oyc-catering-service/.
    environment:
      REDIS_HOST: redis
      POSTGRESQL_HOST: yucca-db
    networks:
      yucca-net:
    healthcheck:
      test: ["CMD", "curl", "--silent", "http://127.0.0.1:8087/swagger/views/swagger-ui/index.html"]
      interval: 5s
      timeout: 240s
      retries: 60

  buy-oyc-api:
    hostname: buy-oyc-api
    container_name: buy-oyc-api
    depends_on:
        yucca-db:
          condition: service_healthy
    build:
      context: buy-oyc-api-service/.
    environment:
      REDIS_HOST: redis
      POSTGRESQL_HOST: yucca-db
      KONG_SERVICE_IP: kong
    networks:
      yucca-net:
    healthcheck:
      test: ["CMD", "curl", "--silent", "http://127.0.0.1:8088/swagger/views/swagger-ui/index.html"]
      interval: 5s
      timeout: 240s
      retries: 60

  buy-oyc-nginx:
    hostname: buy-oyc-nginx
    container_name: buy-oyc-nginx
    build:
      context: ./buy-odd-yucca-gui/.
    ports:
      - "8080:8080"
    restart: on-failure
    environment:
      - KONG_SERVICE_IP=kong
    deploy:
      resources:
        limits:
          memory: 300M
        reservations:
          memory: 300M
    networks:
      yucca-net:
    depends_on:
      kong:
        condition: service_healthy

  redis:
    container_name: redis
    image: redis
    ports:
       - "6379:6379"
    networks:
      yucca-net:

secrets:
  kong_postgres_password:
    file: ./password
