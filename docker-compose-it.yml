version: '3.1'

x-kong-config: &kong-env
  KONG_DATABASE: ${KONG_DATABASE:-off}
  KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
  KONG_PG_HOST: ${POSTGRESQL_HOST:-yucca-db}
  KONG_PG_USER: ${KONG_PG_USER:-kong}
  KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password

volumes:
  kong_prefix_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs

networks:
  yucca-net:
    external: false
    ipam:
      driver: default
      config:
        - subnet: ${NETWORK_SUBNET}

services:
  kong-migrations-up:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations bootstrap && kong migrations up && kong migrations finish
    depends_on:
      - yucca-db
    environment:
      <<: *kong-env
    secrets:
      - kong_postgres_password
    networks:
      - yucca-net
    restart: on-failure

  kong:
    hostname: kong
    image: "${KONG_DOCKER_TAG:-kong:2.7.1}"
    depends_on:
        - yucca-db
    user: "${KONG_USER:-kong}"
    environment:
      <<: *kong-env
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: "${KONG_PROXY_LISTEN:-0.0.0.0:8000}"
      KONG_ADMIN_LISTEN: "${KONG_ADMIN_LISTEN:-0.0.0.0:8001}"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PREFIX: ${KONG_PREFIX:-/var/run/kong}
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: "/opt/kong/kong.yaml"
      KONG_ADMIN_GUI_URL: "http://0.0.0.0:8002"
      KONG_PORTAL_GUI_HOST: "0.0.0.0:8003"
      KONG_PORTAL: "on"
    restart: on-failure
    depends_on:
      - yucca-db
    secrets:
      - kong_postgres_password
    ports:
      # The following two environment variables default to an insecure value (0.0.0.0)
      # according to the CIS Security test.
      - "8000:8000"
      - "${KONG_INBOUND_SSL_PROXY_LISTEN:-0.0.0.0}:8443:8443/tcp"
      # Making them mandatory but undefined, like so would be backwards-breaking:
      # - "${KONG_INBOUND_PROXY_LISTEN?Missing inbound proxy host}:8000:8000/tcp"
      # - "${KONG_INBOUND_SSL_PROXY_LISTEN?Missing inbound proxy ssl host}:8443:8443/tcp"
      # Alternative is deactivating check 5.13 in the security bench, if we consider Kong's own config to be enough security here

      - "127.0.0.1:8001:8001/tcp"
      - "127.0.0.1:8444:8444/tcp"
      - "8002:8002"
      - "8003:8003"
    healthcheck:
      test: [ "CMD", "kong", "health" ]
      interval: 10s
      timeout: 10s
      retries: 20
      start_period: 0s
    volumes:
      - ./kong_prefix_vol:${KONG_PREFIX:-/var/run/kong}
      - ./kong:/opt/kong
      - ./kong/kong-migration.sh:/opt/kong/kong-migration.sh
    security_opt:
      - no-new-privileges
    networks:
      yucca-net:
        ipv4_address: ${KONG_SERVICE_IP}

  yucca-db:
    hostname: yucca-db
    image: postgres:14.2
    user: "postgres"
    command: postgres -c listen_addresses='*'
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
      POSTGRES_PASSWORD_FILE: /run/secrets/kong_postgres_password
      POSTGRES_MULTIPLE_DATABASES: yucca
    secrets:
      - kong_postgres_password
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${KONG_PG_USER:-kong}" ]
      interval: 5s
      timeout: 180s
      retries: 20
      start_period: 0s
    restart: on-failure
    ports:
      - "5432:5432"
    volumes:
      - ./docker-images/docker-psql:/docker-entrypoint-initdb.d
      - ./docker-images/docker-psql/multiple:/docker-entrypoint-initdb.d/multiple
    privileged: true
    networks:
      yucca-net:
        ipv4_address: ${POSTGRESQL_HOST}

  buy-oyc-ticket:
    hostname: buy-oyc-ticket
    depends_on:
        - yucca-db
    build:
      context: buy-oyc-ticket-service/.
    environment:
      REDIS_HOST: ${REDIS_HOST}
      POSTGRESQL_HOST: ${POSTGRESQL_HOST}
    networks:
      yucca-net:
        ipv4_address: ${YUCCA_TICKET_SERVICE_IP}

  buy-oyc-concert:
    hostname: buy-oyc-concert
    depends_on:
        - yucca-db
    build:
      context: buy-oyc-concert-service/.
    environment:
      REDIS_HOST: ${REDIS_HOST}
      POSTGRESQL_HOST: ${POSTGRESQL_HOST}
    networks:
      yucca-net:
        ipv4_address: ${YUCCA_CONCERT_SERVICE_IP}

  buy-oyc-parking:
    hostname: buy-oyc-parking
    depends_on:
        - yucca-db
    build:
      context: buy-oyc-parking-service/.
    environment:
      REDIS_HOST: ${REDIS_HOST}
      POSTGRESQL_HOST: ${POSTGRESQL_HOST}
    networks:
      yucca-net:
        ipv4_address: ${YUCCA_PARKING_SERVICE_IP}

  buy-oyc-catering:
    hostname: buy-oyc-catering
    depends_on:
        - yucca-db
    build:
      context: buy-oyc-catering-service/.
    environment:
      REDIS_HOST: ${REDIS_HOST}
      POSTGRESQL_HOST: ${POSTGRESQL_HOST}
    networks:
      yucca-net:
        ipv4_address: ${YUCCA_CATERING_SERVICE_IP}

  buy-oyc-api:
    hostname: buy-oyc-api
    depends_on:
        - yucca-db
    build:
      context: buy-oyc-api-service/.
    environment:
      REDIS_HOST: ${REDIS_HOST}
      POSTGRESQL_HOST: ${POSTGRESQL_HOST}
      KONG_SERVICE_IP: ${KONG_SERVICE_IP}
    networks:
      yucca-net:
        ipv4_address: ${YUCCA_API_SERVICE_IP}

  buy-oyc-nginx:
    hostname: buy-oyc-nginx
    build:
      context: ./buy-odd-yucca-gui/.
    ports:
      - "8080:8080"
    restart: on-failure
    environment:
      - KONG_SERVICE_IP=${KONG_SERVICE_IP}
    deploy:
      resources:
        limits:
          memory: 300M
        reservations:
          memory: 300M
    networks:
      yucca-net:
        ipv4_address: ${NGINX_SERVICE_IP}

  redis:
    image: redis
    ports:
       - 6379:6379
    networks:
      yucca-net:
        ipv4_address: ${REDIS_HOST}

secrets:
  kong_postgres_password:
    file: ./password
